spring:
  application:
    name: merch-service
  
  # Database Configuration (Production PostgreSQL)
  datasource:
    url: jdbc:postgresql://${DB_HOST:merch-db}:${DB_PORT:5432}/${DB_NAME:merchdb}  # FIXED: service name und db name
    username: ${DB_USERNAME:postgres}          # FIXED: war postgres
    password: ${DB_PASSWORD:password}          # FIXED: war password
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      idle-timeout: 300000
      max-lifetime: 600000
      connection-timeout: 20000
      leak-detection-threshold: 60000          # ADDED: for production monitoring
    
  # JPA Configuration - DEFAULT: First deployment
  jpa:
    hibernate:
      ddl-auto: ${DDL_AUTO:update}  # Use environment variable with fallback
    show-sql: ${SHOW_SQL:false}
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        enable_lazy_load_no_trans: true
        jdbc:
          batch_size: 25
        order_inserts: true
        order_updates: true
        generate_statistics: false
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    
  # FIXED: Redis Configuration with correct Docker service name and port
  data:
    redis:
      host: ${REDIS_HOST:merch-redis}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      timeout: 2000ms
      database: 0
      lettuce:
        pool:
          max-active: 20                       # INCREASED: for production
          max-idle: 10
          min-idle: 5                          # INCREASED: for production  
          max-wait: 5000ms                     # INCREASED: timeout
        shutdown-timeout: 200ms
  
  # Jackson Configuration for proper JSON serialization
  jackson:
    serialization:
      write-dates-as-timestamps: false
      fail-on-empty-beans: false
    deserialization:
      fail-on-unknown-properties: false
    default-property-inclusion: non_null
    
  # FIXED: Cache Configuration with proper Spring Boot Redis cache properties
  cache:
    type: redis
    redis:
      time-to-live: 600s                       # FIXED: was 600000, now proper duration format
      cache-null-values: false
      key-prefix: "pse-merch:"
      use-key-prefix: true
      # REMOVED: value-serializer and key-serializer - these are not valid Spring Boot cache properties
      
  # Server Configuration
server:
  port: ${SERVER_PORT:8083}
  servlet:
    context-path: /merch
  compression:
    enabled: true
    mime-types: application/json,application/xml,text/html,text/xml,text/plain
    min-response-size: 1024

# Management and Monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,caches
  endpoint:
    health:
      show-details: always
      show-components: always
    caches:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
    tags:
      application: ${spring.application.name}
      environment: ${SPRING_PROFILES_ACTIVE:prod}

# Logging Configuration
logging:
  level:
    com.psecars.merch: ${LOG_LEVEL:INFO}
    org.springframework.cache: ${CACHE_LOG_LEVEL:INFO}
    org.hibernate.SQL: ${SQL_LOG_LEVEL:WARN}
    org.hibernate.type.descriptor.sql.BasicBinder: ${SQL_PARAM_LOG_LEVEL:WARN}
    org.springframework.web: ${WEB_LOG_LEVEL:INFO}
    org.springframework.web.cors: DEBUG              # ADDED: Debug CORS issues
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/merch-service.log
    max-size: 10MB
    max-history: 7

# Application specific properties - FIXED CORS CONFIGURATION
app:
  cors:
    allowed-origins: ${CORS_ORIGINS:http://localhost:3000,http://127.0.0.1:3000,https://localhost:3000}  # ENHANCED: Added 127.0.0.1
    allowed-methods: GET,POST,PUT,DELETE,OPTIONS,PATCH,HEAD  # ENHANCED: Added HEAD for better compatibility
    allowed-headers: Accept,Authorization,Content-Type,X-Requested-With,X-CSRF-Token,Cache-Control,X-Api-Version  # FIXED: Explicit headers instead of "*"
    allow-credentials: true
    max-age: 86400                                   # ENHANCED: 24 hours for better performance
  
  pagination:
    default-page-size: 12
    max-page-size: 100
    
  stock:
    low-threshold: 10
    
  order:
    auto-confirm: false
    
  cart:
    cleanup-interval: 3600000 # 1 hour
    expiry-days: 7
    
  images:
    base-url: ${IMAGE_BASE_URL:}
    default-placeholder: "https://images.unsplash.com/photo-1494976688153-c2de3c96cb37?w=400&h=300&fit=crop&auto=format"
    
  cache:
    products-ttl: 600 # 10 minutes
    categories-ttl: 1800 # 30 minutes
    cart-ttl: 300 # 5 minutes

---

# Development Profile
spring:
  config:
    activate:
      on-profile: dev
      
  # H2 Database for development
  datasource:
    url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    driver-class-name: org.h2.Driver
    username: sa
    password: 
    platform: h2
    
  h2:
    console:
      enabled: true
      path: /h2-console
      settings:
        web-allow-others: true
        
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: create-drop
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.H2Dialect
        format_sql: true
        
  cache:
    type: simple
    
  data:
    redis:
      repositories:
        enabled: false
      
logging:
  level:
    com.psecars.merch: DEBUG
    org.springframework.cache: DEBUG
    org.springframework.web: DEBUG
    org.springframework.web.cors: DEBUG             # ADDED: Debug CORS in dev
    org.hibernate.SQL: DEBUG

app:
  cors:
    allowed-origins: "http://localhost:3000,http://127.0.0.1:3000,http://localhost:3001"  # ADDED: Dev-specific CORS origins
    allowed-headers: Accept,Authorization,Content-Type,X-Requested-With,X-CSRF-Token,Cache-Control,X-Api-Version  # FIXED: Explicit headers for dev too

---

# Test Profile
spring:
  config:
    activate:
      on-profile: test
      
  datasource:
    url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    driver-class-name: org.h2.Driver
    username: sa
    password: 
    
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: create-drop
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.H2Dialect
    
  cache:
    type: none
    
  data:
    redis:
      repositories:
        enabled: false

logging:
  level:
    com.psecars.merch: WARN
    org.springframework.cache: WARN

---

# Production Profile - Environment-driven configuration
spring:
  config:
    activate:
      on-profile: prod
      
  jpa:
    hibernate:
      ddl-auto: ${DDL_AUTO:validate}  # Use environment variable
    show-sql: ${SHOW_SQL:false}
    properties:
      hibernate:
        generate_statistics: true # Enable for monitoring
        
  cache:
    type: redis
    
  datasource:
    hikari:
      maximum-pool-size: 25
      minimum-idle: 10
      
logging:
  level:
    com.psecars.merch: ${LOG_LEVEL:WARN}
    org.springframework.cache: ${CACHE_LOG_LEVEL:WARN}
    org.springframework.web: ${WEB_LOG_LEVEL:WARN}
    org.springframework.web.cors: ${CORS_LOG_LEVEL:INFO}  # ADDED: Production CORS logging
    root: WARN

app:
  cache:
    products-ttl: 1800 # 30 minutes in production
    categories-ttl: 3600 # 1 hour in production
    cart-ttl: 900 # 15 minutes in production
    
  cors:
    # PRODUCTION: Can be overridden via environment variables
    allowed-origins: ${CORS_ORIGINS:https://yourdomain.com,https://www.yourdomain.com}
    allowed-headers: Accept,Authorization,Content-Type,X-Requested-With,X-CSRF-Token,Cache-Control,X-Api-Version  # FIXED: Explicit headers for production